# This file is released under the same terms as Rust itself

# Regular comments are written like this
# Default options will be written with no space after the `#`
# Others will not be commented out, and will have placeholders IN_ALL_CAPS

[config]

# Where to store the database
#db = "db.sqlite"

[config.view]
listen = "localhost:8000"
secret = "ME_SECRET_LOL"

# Block off the view so only members of an org can see it.
# [config.view.auth]
# type = "github"
# app_id = "MY_APP_ID"
# app_secret = "MY_SECRIT_LOL"
# organization = "KAOS"

[config.github]

# Port to listen for websockets
listen = "localhost:6000"

# User account to listen for commands on
user = "aelita-mergebot"

# Web address that the Github API is on; this is needed for Github Enterprise
#host = "https://api.github.com"

# Global default owner account for repositories
# This is based on the observation that most organizations and individuals who
# deploy aelita will own all their repos. It is not required to be specified
# here, but if it is not specified it will need to be given for all projects
owner = "MY_USER_OR_ORGANIZATON"

# Personal access token; get it in the user account section on GitHub's website
token = "MY_PERSONAL_ACCESS_TOKEN"

# Github webhook secret. Enter it in when you set up the webhook.
secret = "ME_SECRET_LOL"

# Jenkins configuration. Not required if you're not using jenkins
[config.github.status]

# Port to listen on for build-complete notifications
# Yes, it needs to be different from the other Github notifications
listen = "localhost:7000"

# The git configuration section is not required, because all options have
# defaults
[config.github.git]

# This is a project definition
# The part after the dot is the project's name
[projects.MY_PROJECT]

# Enable try support. Disabled by default.
# try = {}

# AS A NOTE: People used to homu and bors may expect a list of reviewers in
# this section.
# There is not one here, because the Github frontend will determine permissions
# using Github's API.
# For individually-owned repos, any collaborator can act as a reviewer.
# For organizationally-owned repos, any member of a team that has push enabled.
# The type of repo owner is determined at startup,
# and the list of push teams is refreshed when a team event is received.
#
# (This algorithm is the closest thing I could get to
# "r+ is enabled if the merge button is enabled")

# Here, we specify the status notification context that's needed
# Obviously, here's the TaskCluster one
# There are more options, below
github = { status = "TaskCluster" }

# These are the options that can be configured for Github. If you use it,
# remove the `github = {}` part
#[projects.MY_PROJECT.github]

# The owner of the project
#owner = "MY_OWNER_OR_ORGANIZATON"

# The project's repo. It defaults to the project's name
#repo = "MY_PROJECT"

# TaskCluster Github status is our CI
#status = "TaskCluster"

